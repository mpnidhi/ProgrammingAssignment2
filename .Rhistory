makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- matrix(1:4, nrow=2, ncol =2)
m <-makeCacheMatrix(x)
m
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
##########################
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
s <- cacheSolve(m)
print (s)
x$setmean(m)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(inverse) m <<- inverse
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
##########################
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
m <-makeCacheMatrix(x)
m
s
m <-makeCacheMatrix(x)
s <- cacheSolve(m)
print (s)
s2<-cacheSolve(m)
print (s)
x <- matrix(1:9, nrow=3, ncol =3)
x
makeCacheMatrix(x)
print (s)
s <- cacheSolve(m)
m <-makeCacheMatrix(x)
m
print(s)
m <-makeCacheMatrix(x)
m
p1<- cacheSolve(m)
p1<- cacheSolve(x)
p1<- cacheSolve(m)
m <-makeCacheMatrix(x)
m
print(m)
print(x)
p2<- cacheSolve(x)
x <- matrix(1:4, nrow=2, ncol =2)
print (x)
makeCacheMatrix(x)
cacheSolve(m)
print(s)
x <- matrix(4:8, nrow=2, ncol =2)
x <- matrix(5:8, nrow=2, ncol =2)
makeCacheMatrix(x)
cacheSolve(m)
print(s)
x <- matrix(5:8, nrow=2, ncol =2)
x
makeCacheMatrix(x)
print(m)
p <- cacheSolve(m)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(inverse) m <<- inverse
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
##########################
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
x1 <- matrix(5:8, nrow=2, ncol =2)
makeCacheMatrix(x1)
p1 <- cacheSolve(x1)
p1 <- cacheSolve()
